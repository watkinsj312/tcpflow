Only in tcpflow-1.4.5_peanuts/: config.h
Only in tcpflow-1.4.5_peanuts/: config.log
Only in tcpflow-1.4.5_peanuts/: config.status
Only in tcpflow-1.4.5_peanuts/doc: Makefile
Only in tcpflow-1.4.5_peanuts/: Makefile
Only in tcpflow-1.4.5_peanuts/src: 010.000.010.018.53642-192.168.005.250.00022
Only in tcpflow-1.4.5_peanuts/src: 192.168.005.250.00022-010.000.010.018.53642
Only in tcpflow-1.4.5_peanuts/src/be13_api: .deps
Only in tcpflow-1.4.5_peanuts/src/be13_api: .dirstamp
Only in tcpflow-1.4.5_peanuts/src: .deps
Only in tcpflow-1.4.5_peanuts/src/dfxml/src: .deps
Only in tcpflow-1.4.5_peanuts/src/dfxml/src: .dirstamp
Only in tcpflow-1.4.5_peanuts/src/http-parser: .deps
Only in tcpflow-1.4.5_peanuts/src/http-parser: .dirstamp
Only in tcpflow-1.4.5_peanuts/src: Makefile
Only in tcpflow-1.4.5_peanuts/src/netviz: .deps
Only in tcpflow-1.4.5_peanuts/src/netviz: .dirstamp
Only in tcpflow-1.4.5_peanuts/src: report.xml
diff -ur tcpflow-1.4.5/src/tcpdemux.cpp tcpflow-1.4.5_peanuts/src/tcpdemux.cpp
--- tcpflow-1.4.5/src/tcpdemux.cpp	2015-08-11 21:28:53.000000000 -0400
+++ tcpflow-1.4.5_peanuts/src/tcpdemux.cpp	2015-09-24 14:45:58.839317676 -0400
@@ -28,7 +28,7 @@
 #endif
     outdir("."),flow_counter(0),packet_counter(0),
     xreport(0),pwriter(0),max_open_flows(),max_fds(get_max_fds()-NUM_RESERVED_FDS),
-    flow_map(),open_flows(),saved_flow_map(),
+    flow_map(),open_flows(),saved_flow_map(),v_dedup_set(),
     saved_flows(),start_new_connections(false),opt(),fs()
 {
 }
@@ -387,6 +387,25 @@
     /* calculate the total length of the TCP header including options */
     u_int tcp_header_len = tcp_header->th_off * 4;
 
+    // check to see if this was already processed to remove retransmissions
+    // std::string packet_md5 = md5_generator::hash_buf(ip_header,ip_header_len).hexdigest();
+
+    // md5_generator hasher;
+    // hasher.update(pi.ip_len,16)
+    // hasher.update(pi.ip_id,16)
+    // hasher.update(pi.ip_id,16)
+    // md5_t md5val = hasher.final();
+    // std::string packet_md52 = md5val.hexdigest();
+
+    std::string packet_md5 = md5_generator::hash_buf((const unsigned char*) tcp_header,tcp_header_len).hexdigest();
+    // printf("MD5-1: %s \n",packet_md5.c_str());
+    // printf("MD5-2: %s \n",packet_md52.c_str());
+    if (v_dedup_set.check_for_presence_and_insert(packet_md5)) {
+      // printf("FOUND POSSIBLE RETRANSMISSION\n");
+      DEBUG(50) ("FOUND POSSIBLE RETRANSMISSION");
+      return 0;
+    }
+
     /* Find the beginning of the tcp data.
      */
     const u_char *tcp_data   = ip_data + tcp_header_len;
@@ -530,13 +549,13 @@
      * since they both have no data by definition.
      */
     if (tcp_datalen>0){
-	if (opt.console_output) {
-	    tcp->print_packet(tcp_data, tcp_datalen);
-	} else {
-	    if (opt.store_output){
-		tcp->store_packet(tcp_data, tcp_datalen, delta,pi.ts);
+	    if (opt.console_output) {
+	      tcp->print_packet(tcp_data, tcp_datalen);
+	    } else {
+	      if (opt.store_output){
+		      tcp->store_packet(tcp_data, tcp_datalen, delta,pi.ts);
+	      }
 	    }
-	}
     }
 
     if (rst_set){
@@ -631,6 +650,7 @@
     uint16_t ip_payload_len = ip_len - ip_header_len;
     ipaddr src(ip_header->ip_src.addr);
     ipaddr dst(ip_header->ip_dst.addr);
+
     return process_tcp(src, dst, AF_INET,
                        pi.ip_data + ip_header_len, ip_payload_len,
                        pi);
diff -ur tcpflow-1.4.5/src/tcpdemux.h tcpflow-1.4.5_peanuts/src/tcpdemux.h
--- tcpflow-1.4.5/src/tcpdemux.h	2015-08-11 21:28:53.000000000 -0400
+++ tcpflow-1.4.5_peanuts/src/tcpdemux.h	2015-09-24 13:45:27.059133698 -0400
@@ -1,3 +1,32 @@
+#ifndef PEANUTS_DEDUP_H
+#define PEANUTS_DEDUP_H
+template <class TYPE > class peanuts_set {
+    cppmutex M;
+#ifdef HAVE_UNORDERED_SET
+    std::unordered_set<TYPE> peanuts_dedup_map;
+#endif
+#ifdef HAVE_TR1_UNORDERED_SET
+    std::tr1::unordered_set<TYPE> peanuts_dedup_map;
+#endif
+public:
+    peanuts_set():M(),peanuts_dedup_map(){}
+    bool contains(const TYPE &s){
+        cppmutex::lock lock(M);
+        return peanuts_dedup_map.find(s)!=peanuts_dedup_map.end();
+    }
+    void insert(const TYPE &s){
+        cppmutex::lock lock(M);
+        peanuts_dedup_map.insert(s);
+    }
+    bool check_for_presence_and_insert(const TYPE &s){
+        cppmutex::lock lock(M);
+        if(peanuts_dedup_map.find(s)!=peanuts_dedup_map.end()) return true; // in the set
+        peanuts_dedup_map.insert(s);                // otherwise insert it
+        return false;                   // and return that it wasn't
+    }
+};
+#endif
+
 #ifndef TCPDEMUX_H
 #define TCPDEMUX_H
 
@@ -48,6 +77,7 @@
     /* These are not implemented */
     tcpdemux(const tcpdemux &t);
     tcpdemux &operator=(const tcpdemux &that);
+    peanuts_set<std::string> v_dedup_set;
 
     /* see http://mikecvet.wordpress.com/tag/hashing/ */
     typedef struct {
@@ -69,7 +99,6 @@
 #endif
     typedef std::vector<class saved_flow *> saved_flows_t; // needs to be ordered
 
-
     tcpdemux();
 #ifdef HAVE_SQLITE3
     sqlite3 *db;
@@ -181,5 +210,5 @@
     int  process_pkt(const be13::packet_info &pi);
 };
 
-
 #endif
+
diff -ur tcpflow-1.4.5/src/tcpip.cpp tcpflow-1.4.5_peanuts/src/tcpip.cpp
--- tcpflow-1.4.5/src/tcpip.cpp	2015-08-11 21:28:53.000000000 -0400
+++ tcpflow-1.4.5_peanuts/src/tcpip.cpp	2015-09-24 10:04:11.186461171 -0400
@@ -271,8 +271,8 @@
             char b[64];
             size_t count = snprintf(b,sizeof(b),"%04x: ",(int)i);
             if(fwrite(b,1,count,stdout)!=count){
-	      perror("fwrite");
-	    }
+	            perror("fwrite");
+	          }
             spaces += count;
             
             /* Print the hext bytes */
@@ -286,6 +286,7 @@
             }
             /* space out to where the ASCII region is */
             if(spaces>max_spaces) max_spaces=spaces;
+            if(max_spaces<86) max_spaces=86;
             for(;spaces<max_spaces;spaces++){
                 fputc(' ',stdout);
             }
Only in tcpflow-1.4.5_peanuts/src/wifipcap: .deps
Only in tcpflow-1.4.5_peanuts/src/wifipcap: .dirstamp
Only in tcpflow-1.4.5_peanuts/: stamp-h1
Only in tcpflow-1.4.5_peanuts/: tcpflow.spec
Only in tcpflow-1.4.5_peanuts/: tcpflow_peanuts.patch
Only in tcpflow-1.4.5_peanuts/tests: Makefile
